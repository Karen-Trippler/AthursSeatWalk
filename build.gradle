/*
 * Build & run ippo JavaFx examples
 *
 * common tasks are:
 * 'cd ex<N>'		- change into the specified subdirectory to run example <N>
 * 'gradle run'     - build and run the code
 * 'gradle jar'     - create a jar file for distribution
 *
 */

/*********************************************************************************************
 * subprojects
 ********************************************************************************************/

// each example is a separate gradle subproject

subprojects {

	apply plugin: 'java'

	/*********************************************************************************************
	 * dependencies
	 ********************************************************************************************/

	// this specifies the JavaFx libraries that the application requires, and the
	// online repository where they are found. gradle will automatically download
	// these as required, so you do not need to manually download any library code.

	repositories { mavenCentral() }

	def currentOS = org.gradle.internal.os.OperatingSystem.current()
	def platform
	if (currentOS.isWindows()) {
		platform = 'win'
	} else if (currentOS.isLinux()) {
		platform = 'linux'
	} else if (currentOS.isMacOsX()) {
		platform = 'mac'
	}

	dependencies {
		compile "org.openjfx:javafx-base:11:${platform}"
		compile "org.openjfx:javafx-graphics:11:${platform}"
		compile "org.openjfx:javafx-controls:11:${platform}"
		compile "org.openjfx:javafx-fxml:11:${platform}"
	}

	/*********************************************************************************************
	 * execution
	 ********************************************************************************************/

	// this specifies how to run the program from either the jar, or from IntelliJ
	// if you change the name of the main class, you need to change this
	// otherwise, you probably don't want to change anything here

	def mainClassName='Main'

	task run(type: JavaExec) {
		group = "ippo"
		description = "run JavaFx example"
	    classpath sourceSets.main.runtimeClasspath
	    main = "${mainClassName}"
	}

	jar {
		group = "ippo"
		description = "create runnable jar file for JavaFx example"
	    manifest { attributes 'Main-Class': "${mainClassName}" }
	    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
	}
}
